matlines(x,y)
matlines(x,y)
plot.nw()
plot.new()
matlines(x,y)
makeCacheMatrix <- function(x = matrix()) {
m<-NULL
set<-function(y){
x<<-y
m<<-NULL
}
get<-function() x
setmatrix<-function(solve) m<<- solve
getmatrix<-function() m
list(set=set, get=get,
setmatrix=setmatrix,
getmatrix=getmatrix)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m<-x$getmatrix()
if(!is.null(m)){
message("getting cached data")
return(m)
}
matrix<-x$get
m<-solve(matrix, ...)
x$setmatrix(m)
m
}
m = makeCacheMatrix(matrix(sample(4),2,2))
m
cacheSolve(m)
cacheSolve(m)
m$get()
cacheSolve(m)
class(m$get)
library(swirl)
swirl()
install_from_swirl("Getting and Cleaning Data")
library(sqirl)
library(swirl)
swirl()
library(swirl)
swirl()
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_data
swirl()
getwd()
ls()
x <- 9
ls()
list.files()
?list.files
args(list.files)
old.dir <- getwd()
dir.create("testdir")
setwd("testdir")
file.create("mytest.R")
list.files()
file.exists("mytest.R")
file.info("mytest.R")
file.rename("mytest.R","mytest2.R")
file.copy("mytest2.R","mytest3.R")
file.path("mytest3.R")
file.path("folder1","folder2")
?dir.create
dir.create("testdir2","testdir3",recursive=T)
dir.create("testdir2","testdir3",recursive=TRUE)
dir.create(file.path("testdir2","testdir3"),recursive=TRUE)
unlink("testdir2")
unlink("testdir2",recursive=T)
unlink("testdir2",recursive=TRUE)
setwd(ld.dir)
setwd(old.dir)
unlink("testdir",recursive=T)
unlink("testdir",recursive=TRUE)
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20,nrow=4,ncol=5)
identical(my_matrix,my_matrix2)
patients <- c("Bill","Gina","Kelly","Sean")
cbind(patients,my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patients","age","weight","bp","rating","test")
cnames <- c("patients","age","weight","bp","rating","test")
cnames <- c("patient","age","weight","bp","rating","test")
colnames(my_data) <- cnames
my_Data
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6<7
10 <= 10
5 !=7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE,FALSE,FALSE)
TRUE && c(TRUE,FALSE,FALSE)
TRUE | c(TRUE,FALSE,FALSE)
TRUE || c(TRUE,FALSE,FALSE)
5 >8 || 6!= 8 && 4 >3.9
isTRUE(6 >4)
identical("twins","twins")
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints <0)
all(ints > 0)
x = data.frame(1:20,sample(paste(LETTERS,1:20)))
paste(LETTER,1:5,sep="_")
paste(LETTERS,1:5,sep="_")
paste(1:5,LETTERS,sep="_")
x = data.frame(1:20,sample(paste(LETTERS[1:20],1:20),sep="_"))
x = data.frame(1:20,sample(paste(LETTERS[1:20],1:20,sep="_")))
x
colnames(x) <- c("A","B")
x
class(x$B)
class(x$A)
y = data.frame(paste("a",1:20,sep=""),1:20)
y
colnames(y) < c("C","D")
colnames(y) <- c("C","D")
y
z = data.frame(x,y)
z
xor(T,T)
xor(F,F)
xor(T,F)
xor(F,T)
date()
date()
d1 = date()
d2 = date()
d2-d1
d1 = Sys.Date()
d2 = Sys.Date()
d2-d1
d1 = Sys.time()
d1
d2 = Sys.time()
d2-d1
as.numeric(d2-d1)
format(d1,"d.m.Y")
format(d1,"%d.%m.%Y")
swirl()
rm(list=ls())
library(swirl)
swirl()
library(swirl)
BiocInstaller::biocLite()
library(swirl)
install.packages("stringi")
library(swirl)
install.packages("testthat")
library(swirl)
swirl()
install.packages("fields","spam","maps")
install.packages("fields", "spam", "maps")
library(swirl)
swirl()
install.packages("fields","spam","maps")
install.packages("fields", "spam", "maps")
install.packages("fields", "spam", "maps")
install.packages("fields", "spam", "maps")
install.packages("fields", "spam", "maps")
install.packages("fields", "spam", "maps")
install.packages("fields", "spam", "maps")
library(swirl)
swirl()
install.packages("fields")
swirl()
install.packages("spam")
install.packages("spam")
swirl()
library(swirl)
swirl()
install.packages("swirl")
library(swirl)
Andrei
swirl()
install_from_swirl()
install_from_swirl("Data_Analysis")
install_from_swirl("Exploratory_Data_Analysis")
install_from_swirl("Getting_and_Cleaning_Data")
install_from_swirl(" Mathematical_Biostatistics")
install_from_swirl("Mathematical_Biostatistics_Boot_Camp")
install_from_swirl("Overview_of_Statistics")
install_from_swirl("R_Programming")
install_from_swirl("Regression_Models")
install_from_swirl("Statistical_Inference")
swirl()
install.packages("data.table")
swirl()
dim(pm0)
pm0
head(pm0)
cnames
cnames <- strcplit(cnames,"|",fixed=TRUE)
cnames <- strsplit(cnames,"|",fixed=TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pm0 <- read.table(my1999)
my199
my1999
file.exists(my1999)
my1999
my1999=sub(".gz","",my1999)
pm0 = read.table(my1999)
my1999
pm0 = read.table("C:/Program Files/R/R-3.2.1/library/swirl/Courses/Exploratory_Data_Analysis/CaseStudy/airData1999.txt")
pm1 = read.table("C:/Program Files/R/R-3.2.1/library/swirl/Courses/Exploratory_Data_Analysis/CaseStudy/airData2012.txt")
names(pm0) <- make.names(cnames[[1]][wcol])
cnames
names(pm0)
dim(pm0)
pm0 = read.table("C:/Program Files/R/R-3.2.1/library/swirl/Courses/Exploratory_Data_Analysis/CaseStudy/airData1999.txt",comment.char = "#", header = FALSE, sep = "|")
pm1 = read.table("C:/Program Files/R/R-3.2.1/library/swirl/Courses/Exploratory_Data_Analysis/CaseStudy/airData2012.txt",comment.char = "#", header = FALSE, sep = "|")
names(pm0) <- make.names(cnames[[1]][wcol])
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summary(x1)
boxplot(x0,x1)
boxplot(log10(x0),log10(x1)
)
negative = x1 < 0
negative <- x1 < 0
sum(negative,na.rm=TRUE)
mean(negative,na.rm=TRUE)
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates),"%Y%m%d")
head(dates)
hist(dates[negative],'month')
str(site0)
both <- intersect(site0,site1)
both
head(pm0)
cnt0 <- subset(pm0,State.Code==36&county.site %in% both)
cnt1 <- subset(pm1,State.Code==36&county.site %in% both)
sapply(split(cnt0,cnt0$county.site),nrow)
sapply(split(cnt1,cnt0$county.site),nrow)
sapply(split(cnt1,cnt1$county.site),nrow)
pm0sub <- subset(cnt0,County.Code==63&Site.ID==2008)
pm1sub <- subset(cnt1,County.Code==63&Site.ID==2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date),"%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date),"%Y%m%d")
par(mfrow=c(1,2),mar=c(4,4,2,1))
plot(dates0,x0sub,pch=20)
abline(h=median(x0sub,na.rm=TRUE),lwd=2)
plot(dates1,x1sub,pch=20)
abline(h=median(x1sub,na.rm=TRUE),lwd=2)
rng <- range(x0sub,x1sub,na.rm=TRUE)
rng
mn0 <- with(pm0,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn0)
mn1 <- with(pm1,tapply(Sample.Value,State.Code,mean,na.rm=TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(state=names(mn0),mean=mn0)
d1 <- data.frame(state=names(mn1),mean=mn1)
mrg <- merge(d0,d1,by="state")
dim(mrg)
head(mrg)
with(mrg,plot(rep(1,52),mrg[,2],xlin=c(.5,2.5)))
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, plot(rep(1, 52), mrg[, 3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3], xlim = c(.5, 2.5)))
with(mrg, plot(rep(2, 52), mrg[, 3]))
with(mrg, points(rep(2, 52), mrg[, 3]))
segments
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags,class,character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate,flags$landmass,mean)
tapply(flags$population,flags$red,summary)
tapply(flags$population,flags$landmass,summary)
setwd("D:/repres/RepData_PeerAssessment1")
d = read.csv("activities.zip")
d = read.csv("activitiy.zip")
getwd()
d = read.csv("activity.zip")
d = read.csv("activity.csv")
head(d)
tail(d)
mean(is.na(d$steps))
summary(d)
str(d)
?head
head(complete.cases(d))
d2 = complete.cases(d)
class(D)
class(d)
?D
example(D)
class(d2)
d2 = d[complete.cases(d),]
class(d2)
head(d2)
library(dplyt)
library(dplyr)
install.packages("dplyr")
library(dplyr)
View(d)
View(d)
?hist
hist
source("q1.R")
hist(d2$steps)
hist(d2$steps~d2$date)
hist(d$steps)
hist(d2$steps)
hist
hist(d2)
class(d2)
head(d2)
head
source("q1.R")
d2 = group_by(d,date)
d2
d3 = summarize(d2,sum=sum(steps))
head(d3)
hist(d3$steps)
hist(d3$sum)
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q1.R")
source("q2.R")
source("q2.R")
x = 1:10
which.max(x)
x = sample(1:10)
which.max(x)
class(rs$steps)
source("q2.R")
class(rs$steps)
source("q2.R")
source("q2.R")
source("q2.R")
head(rs)
head(rs)
source("q2.R")
head(rs)
head(rs)
source("q2.R")
source("q2.R")
source("q2.R")
rs
source("q2.R")
rs
source("q2.R")
head(rs)
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q2.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
?apply
rs
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q3.R")
source("q4.R")
source("q4.R")
source("q4.R")
View(rs)
View(rs)
source("q4.R")
View(rs)
View(rs)
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
qplot(interval, steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps") + facet_wrap(~ day)
source("q4.R")
qplot(interval, mean.steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps") + facet_wrap(~ day)
source("q4.R")
qplot(interval, mean.steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps") + facet_wrap(.~ day)
source("q4.R")
source("q4.R")
qplot(interval, mean.steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps")
source("q4.R")
qplot(interval, mean.steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps",facets = .~day)
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
source("q4.R")
head(rs)
head(rs)
source("q4.R")
source("q4.R")
qplot(interval, mean.steps, data=rs, geom=c("line"), xlab="Interval",
ylab="Number of steps",facets=.~day)
source("q4.R")
install.packages("'rmarkdown'")
install.packages("rmarkdown")
ylab="Number of steps",facets=.~day)
number of steps
## What is mean total number of steps taken per day?
rs = read.csv("activity.csv")
rs = read.csv("activity.csv")
